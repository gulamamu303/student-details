steps:
  # 1. Clear & Reset Gradle Cache (Fix Possible Corruption)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Clearing Gradle cache..."
        rm -rf /workspace/.gradle
        mkdir -p /workspace/.gradle

  # 2. Build the Spring Boot Application with Fresh Cache
  - name: 'gradle:7.3.3-jdk17'
    entrypoint: 'gradle'
    args: ['clean', 'build', '--no-daemon', '--refresh-dependencies']
    env:
      - 'GRADLE_USER_HOME=/workspace/.gradle'  # ✅ Forces fresh dependencies
      - 'GRADLE_OPTS=-Dorg.gradle.daemon=false -Dorg.gradle.parallel=false'  # ✅ Disables daemon & parallel execution

  # 3. Verify JAR File Exists Before Docker Build
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - 'ls -lh build/libs && if [ ! -f build/libs/studentsDetails-0.0.1-SNAPSHOT.jar ]; then echo "JAR file not found!" && exit 1; fi'

  # 4. Build Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/student-repo/student-details:$SHORT_SHA', '.']

  # 5. Push Docker Image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/student-repo/student-details:$SHORT_SHA']

  # 6. Deploy to Cloud Run (use global to avoid regional restrictions)
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'student-details'
      - '--image=us-central1-docker.pkg.dev/$PROJECT_ID/student-repo/student-details:$SHORT_SHA'
      - '--region=us-central1'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--port=8080'

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
  machineType: 'E2_HIGHCPU_8'  # ✅ More CPU for faster builds
  logging: CLOUD_LOGGING_ONLY  # ✅ Ensures logs are captured properly

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/student-repo/student-details:$SHORT_SHA'
